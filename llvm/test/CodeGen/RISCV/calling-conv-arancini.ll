; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s

define arancini i64 @func0(ptr %0) {
; CHECK-LABEL: func0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    sd s1, 0(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    .cfi_offset s1, -16
; CHECK-NEXT:    li t1, 1
; CHECK-NEXT:    li t2, 2
; CHECK-NEXT:    li s1, 3
; CHECK-NEXT:    call func1@plt
; CHECK-NEXT:    mv t0, t2
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    ld s1, 0(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %2 = call arancini { ptr, i64, i64, i64 } @func1(ptr %0, i64 1, i64 2, i64 3)
  %3 = extractvalue { ptr, i64, i64, i64 } %2, 2
  ret i64 %3
}

define arancini { ptr, i64, i64, i64 } @func1(ptr %0, i64 %1, i64 %2, i64 %3) {
; CHECK-LABEL: func1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    sd s1, 0(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    .cfi_offset s1, -16
; CHECK-NEXT:    call func2@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    ld s1, 0(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %5 = call arancini { ptr, i64, i64, i64 } @func2(ptr %0, i64 %1, i64 %2, i64 %3)
  ret { ptr, i64, i64, i64 } %5
}

define arancini { ptr, i64, i64, i64 } @func2(ptr %0, i64 %1, i64 %2, i64 %3) {
; CHECK-LABEL: func2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd s1, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset s1, -8
; CHECK-NEXT:    addi t1, t1, 1
; CHECK-NEXT:    addi t2, t2, 1
; CHECK-NEXT:    addi s1, s1, 1
; CHECK-NEXT:    ld s1, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %5 = add i64 %1, 1
  %6 = add i64 %2, 1
  %7 = add i64 %3, 1

  %ret_val = insertvalue { ptr, i64, i64, i64 } undef, ptr %0, 0
  %ret_val2 = insertvalue { ptr, i64, i64, i64 } %ret_val, i64 %5, 1
  %ret_val3 = insertvalue { ptr, i64, i64, i64 } %ret_val2, i64 %6, 2
  %ret_val4 = insertvalue { ptr, i64, i64, i64 } %ret_val3, i64 %7, 3

  ret { ptr, i64, i64, i64 } %ret_val4
}
